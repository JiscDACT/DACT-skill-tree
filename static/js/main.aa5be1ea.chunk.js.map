{"version":3,"sources":["data/profiles sync nonrecursive /.json$","data/skilltrees sync nonrecursive /.json$","util.ts","model/skillProfile.ts","view/profile.tsx","view/profileGroup.tsx","view/treeWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","requireAll","requireContext","profiles","require","obj","profile","getEmptyProfiles","formatSkills","skills","i","output","nodeState","updateProfiles","newProfileList","skillsTotal","length","skillsCompleted","skill","node","completion","Math","round","push","Portrait","styled","img","props","max","data","color","Title","h2","Profile","className","name","src","portrait","value","text","styles","path","stroke","fill","description","ProfileGroup","key","TreeWrapper","theme","nodeBorderColor","nodeBorderRadius","nodeHoverBorder","edgeBorder","skillCount","treeId","title","tree","collapsible","handleSave","Component","App","trees","useState","localStorage","getItem","JSON","parse","getProfiles","changeProfiles","getSkills","userSkills","changeUserSkills","myHandleSave","storage","setItem","stringify","resetProfiles","onClick","clear","readOnly","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8HAAA,IAAIA,EAAM,CACT,uBAAwB,GACxB,wBAAyB,GACzB,uBAAwB,GACxB,2BAA4B,GAC5B,iBAAkB,IAInB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,+lHC1BpB,IAAIH,EAAM,CACT,yBAA0B,GAC1B,4BAA6B,GAC7B,qBAAsB,GACtB,aAAc,GACd,oBAAqB,GACrB,aAAc,IAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,8kbC3Bb,SAASY,EAAYC,GACxB,OAAOA,EAAeN,OAAOV,IAAKgB,GCEtC,IACMC,EADKF,EAAWG,OACAlB,KAAI,SAAUmB,GAChC,OAAOA,EAAIC,WAYR,SAASC,IACZ,OAAOJ,EAmBJ,SAASK,EAAaC,GACzB,IAEQC,EAFJC,EAAS,GACb,GAAIF,GAA2B,oBAAVA,EAEjB,IAAKC,KAAKD,EACqB,aAAxBA,EAAOC,GAAGE,YACTD,GAAUD,EAAI,MAI1B,OAAOC,EAGJ,SAASE,EAAeV,EAAeM,GAC1C,IAAIK,EAAiB,GACrB,IAAK,IAAIJ,KAAKP,EAAU,CACpB,IAAIG,EAAUH,EAASO,GACnBK,EAAcT,EAAQG,OAAOO,OAC7BC,EAAkB,EACtB,IAAK,IAAIC,KAASZ,EAAQG,OAAQ,CAC9B,IACIU,EAAOV,EADKH,EAAQG,OAAOS,IAE3BC,GACuB,aAAnBA,EAAKP,YACLK,GAAmB,GAI/B,IAAIG,EAAaC,KAAKC,MAAOL,EAAkBF,EAAe,KACzDK,IACDA,EAAa,GAEjBd,EAAQc,WAAaA,EACrBN,EAAeS,KAAKjB,GAExB,OAAOQ,E,+CC/DLU,EAAWC,IAAOC,IAAV,uEACC,SAAAC,GAAK,OAAIN,KAAKO,IAAID,EAAME,KAAKT,WAAa,IAAM,GAAK,OAChD,SAAAO,GAAK,OAA8B,MAA1BA,EAAME,KAAKT,WAAqBO,EAAME,KAAKC,MAAO,UAEzEC,EAAQN,IAAOO,GAAV,6CACE,SAAAL,GAAK,OAA8B,MAA1BA,EAAME,KAAKT,WAAqBO,EAAME,KAAKC,MAAO,WAGjE,SAASG,EAAQN,GACpB,OACQ,sBAAKO,UAAW,UAAhB,UACI,cAACH,EAAD,CAAOF,KAAMF,EAAME,KAAMK,UAAW,eAApC,SAAqDP,EAAME,KAAKM,OAChE,cAACX,EAAD,CAAUK,KAAMF,EAAME,KAAMK,UAAW,mBAAoBE,IAAKT,EAAME,KAAKQ,WAC3E,qBAAKH,UAAW,aAAhB,SACI,cAAC,IAAD,CACII,MAAOX,EAAME,KAAKT,WAClBmB,KAAI,UAAKZ,EAAME,KAAKT,WAAhB,KACJoB,OAAQ,CACJC,KAAM,CAACC,OAAO,GAAD,OAAKf,EAAME,KAAKC,QAC7BS,KAAM,CAACI,KAAK,GAAD,OAAKhB,EAAME,KAAKC,aAIvC,4BAAIH,EAAME,KAAKe,iBC5BxB,SAASC,EAAalB,GACzB,OACQ,qBAAKO,UAAW,gBAAhB,SAEIP,EAAMxB,SAASjB,KAAI,SAASoB,GAAwC,IAAlBwC,EAAiB,uDAAbxC,EAAQ6B,KAC9D,OAAO,cAACF,EAAD,CAAmBJ,KAAMvB,GAAXwC,Q,mDCNxBC,EAAb,4JAEI,WAAS,IAAD,OACJ,OACI,8BACA,cAAC,gBAAD,UACI,cAAC,iBAAD,CACIC,MACI,CACIC,gBAAiB,OACjBC,iBAAkB,OAClBC,gBAAiB,OACjBC,WAAY,kBANxB,SAUK,cACIC,WADJ,OAEG,cAAC,YAAD,CACIC,OAAQ,EAAK3B,MAAM2B,OACnBC,MAAO,EAAK5B,MAAM4B,MAClB1B,KAAM,EAAKF,MAAM6B,KACjBC,aAAW,EACXb,YAAa,EAAKjB,MAAMiB,YACxBc,WAAY,EAAK/B,MAAM+B,wBAxBnD,GAAiCC,aC4GlBC,MArGf,WAEI,IACMC,EADO5D,EAAYG,OACNlB,KAAI,SAASmB,GAC5B,OAAOA,EAAImD,QAGf,EAAmCM,mBJIhC,WACH,IAAI3D,EAAW4D,aAAaC,QAAQ,YACpC,OAAI7D,GAAyB,SAAbA,EACL8D,KAAKC,MAAM/D,GAEfI,IITqC4D,IAA5C,mBAAOhE,EAAP,KAAiBiE,EAAjB,KACA,EAAuCN,mBJWpC,WACH,IAAIrD,EAASsD,aAAaC,QAAQ,eAClC,OAAIvD,GAA2B,oBAAVA,EACVD,EAAayD,KAAKC,MAAMzD,IAE5B,KIhByC4D,IAAhD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAaC,EAAcnB,EAAa7C,GAI7C,OAHA2D,EAAevD,EAAeV,EAAUM,IACxCgE,EAAQC,QAAQ,WAAYT,KAAKU,UAAUxE,IAC3CoE,EAAiB/D,EAAaC,IACvBgE,EAAQC,QAAQ,UAAYpB,EAAQW,KAAKU,UAAUlE,IAM9D,SAASmE,IACLR,EAAevD,EAAeN,IAAoB,KAQtD,OACI,sBAAK2B,UAAW,MAAhB,UACI,yBAAQA,UAAW,aAAnB,UACI,oBAAIA,UAAW,QAAf,6BACA,8EAEJ,kCACI,eAAC,IAAD,WACI,eAAC,IAAD,WACI,cAAC,IAAD,2BACA,cAAC,IAAD,uBAEI2B,EAAM3E,KAAI,SAASsE,GAAyB,IAAfV,EAAc,uDAAVU,EAAKrB,KAClC,OACA,cAAC,IAAD,UAAgBqB,EAAKrB,MAAXW,MAIlB,cAAC,IAAD,+BAEJ,cAAC,IAAD,UACI,8BACI,sBAAKZ,UAAW,OAAhB,UACI,8CACA,sMAGA,sGACA,4GACA,6JAKZ,cAAC,IAAD,UACI,cAACW,EAAD,CAAc1C,SAAUA,MAGxB0D,EAAM3E,KAAI,SAASsE,GAAyB,IAAfV,EAAc,uDAAVU,EAAKrB,KAClC,OACA,cAAC,IAAD,UACI,cAAC,EAAD,CACImB,OAAS,OACTE,KAAQA,EAAKA,KACbD,MAASC,EAAKrB,KACduB,WAAcc,KALP1B,MAUvB,eAAC,IAAD,WACI,wBAAQ+B,QAASD,EAAjB,4BACA,wBAAQC,QA1D5B,WACID,IACAb,aAAae,QACbP,EAAiB,KAuDD,mCACA,4BAAG,0BAAUjC,MAAOgC,EAAYS,UAAU,cAItD,mCACI,+NAIA,+CAAiB,mBAAGC,KAAK,gDACLzB,MAAM,eADT,0BAAjB,SAC+D,mBAAGyB,KAAK,4BACLzB,MAAM,WADT,iCAE/D,+CAAiB,mBAAGyB,KAAK,0BAA0BzB,MAAM,UAAxC,qBAAjB,SAAoF,mBAChFyB,KAAK,4BAA4BzB,MAAM,WADyC,wCC1FrF0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAGJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.aa5be1ea.chunk.js","sourcesContent":["var map = {\n\t\"./data_engineer.json\": 32,\n\t\"./data_scientist.json\": 33,\n\t\"./data_wrangler.json\": 34,\n\t\"./software_engineer.json\": 35,\n\t\"./viz_wiz.json\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 31;","var map = {\n\t\"./data_management.json\": 49,\n\t\"./data_visualisation.json\": 50,\n\t\"./programming.json\": 51,\n\t\"./sql.json\": 52,\n\t\"./statistics.json\": 53,\n\t\"./web.json\": 54\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 48;","export function requireAll( requireContext:any ) {\n    return requireContext.keys().map( requireContext );\n}","import {Skill} from \"beautiful-skill-tree/dist/models\";\nimport {requireAll} from \"../util\";\n\nlet data = requireAll(require.context(\"../data/profiles/\", false, /.json$/))\nconst profiles = data.map(function (obj: any) {\n    return obj.profile;\n});\n\nexport class SkillProfile {\n    name: String = '';\n    description?: String;\n    skills: String[] = [];\n    completion?: Number = 0;\n    portrait?: String;\n    color?: String = 'white'\n}\n\nexport function getEmptyProfiles() {\n    return profiles\n}\n\nexport function getProfiles(): SkillProfile[] {\n    let profiles = localStorage.getItem(\"profiles\");\n    if (profiles && profiles !== \"null\") {\n        return JSON.parse(profiles);\n    }\n    return getEmptyProfiles()\n}\n\nexport function getSkills(): any {\n    let skills = localStorage.getItem(\"skills-DACT\")\n    if (skills && typeof skills != 'undefined') {\n        return formatSkills(JSON.parse(skills))\n    }\n    return null;\n}\n\nexport function formatSkills(skills: any): any {\n    let output = ''\n    if (skills && typeof skills != 'undefined') {\n        let i: keyof typeof skills\n        for (i in skills) {\n            if(skills[i].nodeState === 'selected') {\n                output += i + '\\n'\n            }\n        }\n    }\n    return output\n}\n\nexport function updateProfiles(profiles: any, skills: any) {\n    let newProfileList = []\n    for (let i in profiles) {\n        let profile = profiles[i]\n        let skillsTotal = profile.skills.length\n        let skillsCompleted = 0\n        for (let skill in profile.skills) {\n            let skillName = profile.skills[skill];\n            let node = skills[skillName as keyof Skill];\n            if (node) {\n                if (node.nodeState === 'selected') {\n                    skillsCompleted += 1;\n                }\n            }\n        }\n        let completion = Math.round((skillsCompleted / skillsTotal) * 100);\n        if (!completion) {\n            completion = 0;\n        }\n        profile.completion = completion\n        newProfileList.push(profile)\n    }\n    return newProfileList\n}","import React from \"react\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styled from \"styled-components\";\n\ninterface Props {\n    data: any;\n}\n\nconst Portrait = styled.img<Props> `\n    opacity: ${props => Math.max(props.data.completion / 200 + 0.5, 0.3)};\n    border-color: ${props => props.data.completion === 100 ? props.data.color: 'gray'};\n`\nconst Title = styled.h2<Props> `\n    color: ${props => props.data.completion === 100 ? props.data.color: 'white'};\n`\n\nexport function Profile(props:any) {\n    return (\n            <div className={'profile'}>\n                <Title data={props.data} className={'profile-name'}>{props.data.name}</Title>\n                <Portrait data={props.data} className={'profile-portrait'} src={props.data.portrait}/>\n                <div className={'completion'}>\n                    <CircularProgressbar\n                        value={props.data.completion}\n                        text={`${props.data.completion}%`}\n                        styles={{\n                            path: {stroke: `${props.data.color}`,},\n                            text: {fill: `${props.data.color}`,}\n                        }}\n                    />\n                </div>\n                <p>{props.data.description}</p>\n            </div>\n        )\n}","import {Profile} from \"./profile\";\nimport React from \"react\";\nimport {SkillProfile} from \"../model/skillProfile\";\n\nexport function ProfileGroup(props:any){\n    return (\n            <div className={'profile-group'}>\n            {\n                props.profiles.map(function(profile:SkillProfile, key=profile.name){\n                return <Profile key={key} data={profile}/>;\n                })\n            }\n            </div>\n    )\n}","import React, {Component} from \"react\";\nimport {SkillGroupDataType, SkillProvider, SkillTree, SkillTreeGroup} from \"beautiful-skill-tree\";\n\nexport class TreeWrapper extends Component<any> {\n\n    render(){\n        return (\n            <div>\n            <SkillProvider>\n                <SkillTreeGroup\n                    theme={\n                        {\n                            nodeBorderColor: 'grey',\n                            nodeBorderRadius: '32px',\n                            nodeHoverBorder: 'none',\n                            edgeBorder: '1px solid grey'\n                        }\n\n                    }>\n                    {(\n                        {skillCount}: SkillGroupDataType) => (\n                        <SkillTree\n                            treeId={this.props.treeId}\n                            title={this.props.title}\n                            data={this.props.tree}\n                            collapsible\n                            description={this.props.description}\n                            handleSave={this.props.handleSave}\n                        />\n                    )}\n                </SkillTreeGroup>\n            </SkillProvider>\n            </div>\n        )\n    }\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {getEmptyProfiles, getProfiles, getSkills, formatSkills} from './model/skillProfile'\nimport {updateProfiles} from \"./model/skillProfile\";\nimport {ProfileGroup} from \"./view/profileGroup\";\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport {TreeWrapper} from \"./view/treeWrapper\";\nimport {requireAll} from \"./util\";\n\nfunction App() {\n\n    const data = requireAll( require.context(\"./data/skilltrees/\", false, /.json$/) )\n    const trees = data.map(function(obj:any) {\n        return obj.tree;\n    });\n\n    const [profiles, changeProfiles] = useState(getProfiles());\n    const [userSkills, changeUserSkills] = useState(getSkills());\n\n    function myHandleSave(storage: any, treeId: any, skills: any) {\n        changeProfiles(updateProfiles(profiles, skills))\n        storage.setItem(\"profiles\", JSON.stringify(profiles))\n        changeUserSkills(formatSkills(skills))\n        return storage.setItem(\"skills-\" + treeId, JSON.stringify(skills));\n    }\n\n    //\n    // Debugging use - deletes the saved profiles\n    //\n    function resetProfiles(){\n        changeProfiles(updateProfiles(getEmptyProfiles(), []))\n    }\n    function clearAllData(){\n        resetProfiles()\n        localStorage.clear()\n        changeUserSkills('')\n    }\n\n    return (\n        <div className={'App'}>\n            <header className={'App-header'}>\n                <h1 className={'title'}>DACT Skill Tree</h1>\n                <h3>Choose your own data analytics adventure!</h3>\n            </header>\n            <article>\n                <Tabs>\n                    <TabList>\n                        <Tab>Introduction</Tab>\n                        <Tab>Profiles</Tab>\n                        {\n                            trees.map(function(tree:any, key=tree.name){\n                                return(\n                                <Tab key={key}>{tree.name}</Tab>\n                                )\n                            })\n                        }\n                        <Tab>Admin/Dev use</Tab>\n                    </TabList>\n                    <TabPanel>\n                        <div>\n                            <div className={'hero'}>\n                                <h1>Introduction</h1>\n                                <p>This is an interactive skill tree: select skills in the areas\n                                    in each tab, and then check out the Profiles tab to see which specialisms\n                                    you are most closely matching</p>\n                                <p>The data is only stored locally in your browser so feel free to play.</p>\n                                <p>If you want to reset everything, there are buttons for this on the end tab.</p>\n                                <p>Note that as this is currently just a demo/work-in-progress, it may change\n                                    at any time, and your profile may be lost.</p>\n                            </div>\n                        </div>\n                    </TabPanel>\n                    <TabPanel>\n                        <ProfileGroup profiles={profiles}/>\n                    </TabPanel>\n                    {\n                        trees.map(function(tree:any, key=tree.name){\n                            return(\n                            <TabPanel key={key}>\n                                <TreeWrapper\n                                    treeId = \"DACT\"\n                                    tree = {tree.tree}\n                                    title = {tree.name}\n                                    handleSave = {myHandleSave}\n                                />\n                            </TabPanel>\n                            )})\n                    }\n                    <TabPanel>\n                        <button onClick={resetProfiles}>Reset profiles</button>\n                        <button onClick={clearAllData}>Clear all stored data</button>\n                        <p><textarea value={userSkills} readOnly={true}/></p>\n                    </TabPanel>\n                </Tabs>\n            </article>\n            <footer>\n                <p>This is a demo only! The images it uses are all development placeholders and\n                    are not owned or licensed for use.\n                    If you own an image and want it removed,\n                    just let me know and I'll remove it. </p>\n                <p>Icons made by <a href=\"https://www.flaticon.com/authors/dinosoftlabs\"\n                                    title=\"DinosoftLabs\">DinosoftLabs</a> from <a href=\"https://www.flaticon.com/\"\n                                                                                  title=\"Flaticon\">www.flaticon.com</a></p>\n                <p>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a\n                    href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}