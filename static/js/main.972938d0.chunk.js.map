{"version":3,"sources":["data/profiles sync nonrecursive /.json$","data/skilltrees sync nonrecursive /.json$","util.ts","model/skillProfile.ts","view/profile.tsx","view/profileGroup.tsx","view/treeWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","requireAll","requireContext","profiles","require","obj","profile","neededSkills","getEmptyProfiles","getSkills","skills","localStorage","getItem","JSON","parse","formatSkills","i","output","nodeState","getSkillNameFromId","skillId","skillList","skill","find","item","console","log","getFlatChildList","treeName","push","title","children","updateProfiles","newProfileList","skillsTotal","length","skillsCompleted","j","skillName","node","completion","Math","round","Portrait","styled","img","_templateObject","_taggedTemplateLiteral","props","max","data","color","Title","h2","_templateObject2","Description","p","_templateObject3","SimpleDialog","onClose","selectedValue","open","handleClose","_jsxs","Dialog","_jsx","DialogTitle","List","ListItem","button","onClick","ListItemText","primary","Button","variant","Profile","_React$useState","React","useState","_React$useState2","_slicedToArray","setOpen","className","name","src","portrait","CircularProgressbar","value","text","concat","styles","path","stroke","fill","size","description","ProfileGroup","_useState","_useState2","category","setCategory","_useState3","_useState4","squad","setSquad","_useState5","_useState6","level","setLevel","onChange","target","cat","filter","key","arguments","undefined","TreeWrapper","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","_this","SkillProvider","SkillTreeGroup","theme","nodeBorderColor","nodeBorderRadius","nodeHoverBorder","edgeBorder","_ref","skillCount","SkillTree","treeId","tree","collapsible","handleSave","Component","App","trees","flattenSkills","userSkills","changeUserSkills","getProfiles","changeProfiles","myHandleSave","storage","setItem","stringify","resetProfiles","Tabs","TabList","Tab","TabPanel","clear","readOnly","join","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.972938d0.chunk.js","sourcesContent":["var map = {\n\t\"./TailoredDatasetsbeginner.json\": 67,\n\t\"./TailoredDatasetsintermediate.json\": 68,\n\t\"./TailoredDatasetsmaster.json\": 69,\n\t\"./celeste.json\": 70,\n\t\"./cheetah.json\": 71,\n\t\"./cloud_navigator.json\": 72,\n\t\"./cub.json\": 73,\n\t\"./data_wrangler.json\": 74,\n\t\"./dummy.json\": 75,\n\t\"./engager.json\": 76,\n\t\"./heidi_plus.json\": 77,\n\t\"./jack.json\": 78,\n\t\"./kef.json\": 79,\n\t\"./python_tamer.json\": 80,\n\t\"./scribe.json\": 81,\n\t\"./scrum_master.json\": 82,\n\t\"./seer.json\": 83,\n\t\"./sequellist.json\": 84,\n\t\"./stats_wonk.json\": 85,\n\t\"./tdsa_advanced.json\": 86,\n\t\"./tdsa_beginner.json\": 87,\n\t\"./tdsa_intermediate.json\": 88,\n\t\"./tdsa_intermediateplus.json\": 89,\n\t\"./tdsa_starter.json\": 90,\n\t\"./viz_wiz.json\": 91\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 66;","var map = {\n\t\"./agile.json\": 104,\n\t\"./cloud_computing.json\": 105,\n\t\"./codesign.json\": 106,\n\t\"./data.json\": 107,\n\t\"./data_management.json\": 108,\n\t\"./data_visualisation.json\": 109,\n\t\"./nlp.json\": 110,\n\t\"./programming.json\": 111,\n\t\"./research.json\": 112,\n\t\"./sql.json\": 113,\n\t\"./statistics.json\": 114,\n\t\"./tailoreddatasets.json\": 115,\n\t\"./tailoreddatasetssoft.json\": 116,\n\t\"./tdsa_starter_skills.json\": 117,\n\t\"./web.json\": 118,\n\t\"./writing.json\": 119\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 103;","export function requireAll( requireContext:any ) {\r\n    return requireContext.keys().map( requireContext );\r\n}","import {Skill} from \"beautiful-skill-tree/dist/models\";\r\nimport {requireAll} from \"../util\";\r\n\r\nlet data = requireAll(require.context(\"../data/profiles/\", false, /.json$/))\r\nconst profiles = data.map(function (obj: any) {\r\n    let profile = obj.profile;\r\n    profile.neededSkills = [];\r\n    return profile;\r\n});\r\n\r\nexport class SkillProfile {\r\n    name: String = '';\r\n    description?: String;\r\n    skills: String[] = [];\r\n    completion?: Number = 0;\r\n    portrait?: String;\r\n    color?: String = 'white';\r\n    neededSkills?: String[] = [];\r\n}\r\n\r\nexport function getEmptyProfiles() {\r\n    return profiles\r\n}\r\n\r\nexport function getProfiles(skillList: any): SkillProfile[] {\r\n    let profiles = getEmptyProfiles();\r\n    let skills = getSkills();\r\n    profiles = updateProfiles(profiles, skills, skillList)\r\n    return profiles;\r\n}\r\n\r\nexport function getSkills(): any {\r\n    let skills = localStorage.getItem(\"skills-DACT\")\r\n    if (skills && typeof skills != 'undefined') {\r\n        return JSON.parse(skills)\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getFormattedSkills(): any {\r\n    return formatSkills(getSkills())\r\n}\r\n\r\nexport function formatSkills(skills: any): any {\r\n    let output = ''\r\n    if (skills && typeof skills != 'undefined') {\r\n        let i: keyof typeof skills\r\n        for (i in skills) {\r\n            if(skills[i].nodeState === 'selected') {\r\n                output += i + '\\n'\r\n            }\r\n        }\r\n    }\r\n    return output\r\n}\r\n\r\nfunction getSkillNameFromId(skillId:string, skillList: any): any{\r\n    let skill = skillList.find(function(item:any){\r\n        return item[\"id\"] === skillId\r\n    })\r\n    if(!skill){\r\n        console.log(skillId)\r\n        return null\r\n    }\r\n    return skill\r\n}\r\n\r\nexport function flattenSkills(trees: any): any[]{\r\n    let skills: any[] = []\r\n    for(let i in trees){\r\n        let treeName = trees[i].name\r\n        let tree = trees[i].tree\r\n        for(let j in tree){\r\n            getFlatChildList(tree[j], skills, treeName)\r\n        }\r\n    }\r\n    return skills\r\n}\r\n\r\nfunction getFlatChildList(skill: any, skills: any[], treeName: string){\r\n    skills.push({\"id\":skill.id, \"title\": skill.title + \" in \" + treeName})\r\n    for(let i in skill.children){\r\n        getFlatChildList(skill.children[i], skills, treeName)\r\n    }\r\n}\r\n\r\nexport function updateProfiles(profiles: any, skills: any, skillList: any) {\r\n    let newProfileList = []\r\n\r\n    if (!skills) {skills = []}\r\n\r\n    for (let i in profiles) {\r\n        let profile = profiles[i]\r\n        profile.neededSkills = []\r\n        let skillsTotal = profile.skills.length\r\n        let skillsCompleted = 0\r\n        for (let j in profile.skills) {\r\n            let skillName = profile.skills[j];\r\n            let node = skills[skillName as keyof Skill];\r\n            if (node) {\r\n                if (node.nodeState === 'selected') {\r\n                    skillsCompleted += 1;\r\n                } else {\r\n                    profile.neededSkills.push(getSkillNameFromId(skillName, skillList))\r\n                }\r\n            } else {\r\n                profile.neededSkills.push(getSkillNameFromId(skillName, skillList))\r\n            }\r\n        }\r\n        let completion = Math.round((skillsCompleted / skillsTotal) * 100);\r\n        if (!completion) {\r\n            completion = 0;\r\n        }\r\n        profile.completion = completion\r\n        newProfileList.push(profile)\r\n    }\r\n    return newProfileList\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport styled from \"styled-components\";\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n\r\ninterface Props {\r\n    data: any;\r\n}\r\n\r\nconst Portrait = styled.img<Props> `\r\n    opacity: ${props => Math.max(props.data.completion / 200 + 0.5, 0.3)};\r\n    border-color: ${props => props.data.completion === 100 ? props.data.color: 'gray'};\r\n`\r\nconst Title = styled.h2<Props> `\r\n    color: ${props => props.data.completion === 100 ? props.data.color: 'white'};\r\n`\r\n\r\nconst Description = styled.p`\r\n    font-size: 1rem;\r\n`\r\n\r\nfunction SimpleDialog(props: any) {\r\n    const { onClose, selectedValue, open } = props;\r\n\r\n    const handleClose = () => {\r\n        onClose(selectedValue);\r\n    };\r\n\r\n    const handleListItemClick = (value:any) => {\r\n        onClose(value);\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\">What skills do I need?</DialogTitle>\r\n            <List>\r\n                {props.skills.map((skill:any) => (\r\n                    <ListItem button onClick={() => handleListItemClick(skill)} key={skill.id}>\r\n                        <ListItemText primary={skill.title} />\r\n                    </ListItem>\r\n                ))}\r\n\r\n            </List>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClose}>\r\n                Close\r\n            </Button>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    skills: PropTypes.any.isRequired\r\n};\r\n\r\n    export function Profile(props: any) {\r\n        const [open, setOpen] = React.useState(false);\r\n\r\n        const handleClickOpen = () => {\r\n            setOpen(true);\r\n        };\r\n\r\n        const handleClose = () => {\r\n            setOpen(false);\r\n        };\r\n\r\n        return (\r\n            <div className={'profile'}>\r\n                <Title data={props.data} className={'profile-name'}>{props.data.name}</Title>\r\n                <Portrait data={props.data} className={'profile-portrait'} src={props.data.portrait}/>\r\n                <div className={'completion'}>\r\n                    <CircularProgressbar\r\n                        value={props.data.completion}\r\n                        text={`${props.data.completion}%`}\r\n                        styles={{\r\n                            path: {stroke: `${props.data.color}`,},\r\n                            text: {fill: `${props.data.color}`,}\r\n                        }}\r\n                    />\r\n                </div>\r\n                <Button variant=\"text\" color=\"inherit\" size={\"small\"} onClick={handleClickOpen}>\r\n                    What skills do I need?\r\n                </Button>\r\n                <SimpleDialog skills={props.data.neededSkills} open={open} onClose={handleClose}/>\r\n                <Description>{props.data.description}</Description>\r\n            </div>\r\n        )\r\n    }","import {Profile} from \"./profile\";\r\nimport React, {useState} from \"react\";\r\nimport {SkillProfile} from \"../model/skillProfile\";\r\n\r\nexport function ProfileGroup(props:any){\r\n\r\n    const categories = ['Any', 'Other', 'Epic', 'Squad']\r\n    const squads = ['Any', 'Cheetah', 'Squadge', 'Beta Blockers']\r\n    const levels = ['Any', 'Beginner', 'Intermediate', 'Advanced']\r\n\r\n    const [category, setCategory] = useState('Any')\r\n    const [squad, setSquad] = useState('Any')\r\n    const [level, setLevel] = useState('Any')\r\n\r\n    const filteredProfiles = () => {\r\n        return props.profiles.filter((profile: { category: string; squad:string; level:string }) =>\r\n            (category === 'Any' || profile.category === 'Any' || (profile.category && profile.category === category))\r\n            &&\r\n            (squad === 'Any' || profile.squad === 'Any' || (profile.squad && profile.squad === squad))\r\n            &&\r\n            (level === 'Any' || profile.level === 'Any' || (profile.level && profile.level === level))\r\n        );\r\n    }\r\n\r\n    return (\r\n            <div>\r\n                <div className={'filter-group'}>\r\n                    <p className={'filter'}>Profile type <select onChange={(e) => setCategory(e.target.value)}>\r\n                        {\r\n                            categories.map((cat) => {\r\n                                return <option key={cat}>{cat}</option>\r\n                            })\r\n                        }\r\n                    </select>\r\n                    </p>\r\n\r\n                    <p className={'filter'}>Squad <select onChange={(e) => setSquad(e.target.value)}>\r\n                            {\r\n                                squads.map((cat) => {\r\n                                    return <option key={cat}>{cat}</option>\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </p>\r\n\r\n                    <p className={'filter'}>Level <select onChange={(e) => setLevel(e.target.value)}>\r\n                        {\r\n                            levels.map((cat) => {\r\n                                return <option key={cat}>{cat}</option>\r\n                            })\r\n                        }\r\n                    </select>\r\n                    </p>\r\n                </div>\r\n\r\n\r\n            <div className={'profile-group'}>\r\n            {\r\n                filteredProfiles().map(function(profile:SkillProfile, key=profile.name){\r\n                return <Profile key={key} data={profile}/>;\r\n                })\r\n            }\r\n            </div>\r\n            </div>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport {SkillGroupDataType, SkillProvider, SkillTree, SkillTreeGroup} from \"beautiful-skill-tree\";\r\n\r\nexport class TreeWrapper extends Component<any> {\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n            <SkillProvider>\r\n                <SkillTreeGroup\r\n                    theme={\r\n                        {\r\n                            nodeBorderColor: 'grey',\r\n                            nodeBorderRadius: '32px',\r\n                            nodeHoverBorder: 'none',\r\n                            edgeBorder: '1px solid grey'\r\n                        }\r\n\r\n                    }>\r\n                    {(\r\n                        {skillCount}: SkillGroupDataType) => (\r\n                        <SkillTree\r\n                            treeId={this.props.treeId}\r\n                            title={this.props.title}\r\n                            data={this.props.tree}\r\n                            collapsible\r\n                            description={this.props.description}\r\n                            handleSave={this.props.handleSave}\r\n                        />\r\n                    )}\r\n                </SkillTreeGroup>\r\n            </SkillProvider>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {getEmptyProfiles, getProfiles, getFormattedSkills, formatSkills, flattenSkills} from './model/skillProfile'\r\nimport {updateProfiles} from \"./model/skillProfile\";\r\nimport {ProfileGroup} from \"./view/profileGroup\";\r\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport {TreeWrapper} from \"./view/treeWrapper\";\r\nimport {requireAll} from \"./util\";\r\n\r\nfunction App() {\r\n\r\n    const data = requireAll( require.context(\"./data/skilltrees/\", false, /.json$/) )\r\n    const trees = data.map(function(obj:any) {\r\n        return obj.tree;\r\n    });\r\n    const skillList = flattenSkills(trees);\r\n\r\n    const [userSkills, changeUserSkills] = useState(getFormattedSkills());\r\n    const [profiles, changeProfiles] = useState(getProfiles(skillList));\r\n\r\n    function myHandleSave(storage: any, treeId: any, skills: any) {\r\n        changeProfiles(updateProfiles(profiles, skills, skillList))\r\n        storage.setItem(\"profiles\", JSON.stringify(profiles))\r\n        changeUserSkills(formatSkills(skills))\r\n        return storage.setItem(\"skills-\" + treeId, JSON.stringify(skills));\r\n    }\r\n\r\n    //\r\n    // Debugging use - deletes the saved profiles\r\n    //\r\n    function resetProfiles(){\r\n        changeProfiles(updateProfiles(getEmptyProfiles(), [], skillList))\r\n    }\r\n    function clearAllData(){\r\n        resetProfiles()\r\n        localStorage.clear()\r\n        changeUserSkills('')\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <header className={'App-header'}>\r\n                <h1 className={'title'}>DACT Skill Tree</h1>\r\n                <h3>Choose your own data analytics adventure!</h3>\r\n            </header>\r\n            <article>\r\n                <Tabs>\r\n                    <TabList>\r\n                        <Tab>Introduction</Tab>\r\n                        <Tab>Profiles</Tab>\r\n                        {\r\n                            trees.map(function(tree:any, key=tree.name){\r\n                                return(\r\n                                <Tab key={key}>{tree.name}</Tab>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Tab>Admin/Dev use</Tab>\r\n                    </TabList>\r\n                    <TabPanel>\r\n                        <div>\r\n                            <div className={'hero'}>\r\n                                <h1>Introduction</h1>\r\n                                <p>This is an interactive skill tree: select skills in the areas\r\n                                    in each tab, and then check out the Profiles tab to see which specialisms\r\n                                    you are most closely matching</p>\r\n                                <p>The data is only stored locally in your browser so feel free to play.</p>\r\n                                <p>If you want to reset everything, there are buttons for this on the end tab.</p>\r\n                                <p>Note that as this is currently just a demo/work-in-progress, it may change\r\n                                    at any time, and your profile may be lost.</p>\r\n                            </div>\r\n                        </div>\r\n                    </TabPanel>\r\n                    <TabPanel>\r\n                        <ProfileGroup profiles={profiles}/>\r\n                    </TabPanel>\r\n                    {\r\n                        trees.map(function(tree:any, key=tree.name){\r\n                            return(\r\n                            <TabPanel key={key}>\r\n                                <TreeWrapper\r\n                                    treeId = \"DACT\"\r\n                                    tree = {tree.tree}\r\n                                    title = {tree.name}\r\n                                    handleSave = {myHandleSave}\r\n                                />\r\n                            </TabPanel>\r\n                            )})\r\n                    }\r\n                    <TabPanel>\r\n                        <button onClick={resetProfiles}>Reset profiles</button>\r\n                        <button onClick={clearAllData}>Clear all stored data</button>\r\n                        <p>Current selected skills</p>\r\n                        <p><textarea value={userSkills} readOnly={true}/></p>\r\n                        <p>All skills</p>\r\n                        <textarea value={\r\n                            skillList.map(function (skill: any, key = skill.id) {\r\n                                return (\r\n                                    skill.id + ', ' + skill.title +'\\n'\r\n                                )\r\n                            }).join('')\r\n                        }/>\r\n                    </TabPanel>\r\n                </Tabs>\r\n            </article>\r\n            <footer>\r\n                <p>This is a demo only! The images it uses are all development placeholders and\r\n                    are not owned or licensed for use.\r\n                    If you own an image and want it removed,\r\n                    just let me know and I'll remove it. </p>\r\n                <p>Icons made by <a href=\"https://www.flaticon.com/authors/dinosoftlabs\"\r\n                                    title=\"DinosoftLabs\">DinosoftLabs</a> from <a href=\"https://www.flaticon.com/\"\r\n                                                                                  title=\"Flaticon\">www.flaticon.com</a></p>\r\n                <p>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a\r\n                    href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>\r\n    ,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}